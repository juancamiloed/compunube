/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 41482.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 3.0], [14.7, 3.0], [14.8, 3.0], [14.9, 3.0], [15.0, 3.0], [15.1, 3.0], [15.2, 3.0], [15.3, 3.0], [15.4, 4.0], [15.5, 4.0], [15.6, 4.0], [15.7, 4.0], [15.8, 4.0], [15.9, 5.0], [16.0, 5.0], [16.1, 5.0], [16.2, 6.0], [16.3, 6.0], [16.4, 6.0], [16.5, 6.0], [16.6, 7.0], [16.7, 8.0], [16.8, 9.0], [16.9, 9.0], [17.0, 10.0], [17.1, 11.0], [17.2, 11.0], [17.3, 12.0], [17.4, 13.0], [17.5, 14.0], [17.6, 15.0], [17.7, 16.0], [17.8, 16.0], [17.9, 17.0], [18.0, 18.0], [18.1, 19.0], [18.2, 20.0], [18.3, 21.0], [18.4, 22.0], [18.5, 23.0], [18.6, 23.0], [18.7, 24.0], [18.8, 25.0], [18.9, 26.0], [19.0, 27.0], [19.1, 28.0], [19.2, 28.0], [19.3, 29.0], [19.4, 31.0], [19.5, 32.0], [19.6, 33.0], [19.7, 34.0], [19.8, 36.0], [19.9, 37.0], [20.0, 38.0], [20.1, 39.0], [20.2, 40.0], [20.3, 43.0], [20.4, 45.0], [20.5, 45.0], [20.6, 46.0], [20.7, 47.0], [20.8, 49.0], [20.9, 51.0], [21.0, 52.0], [21.1, 53.0], [21.2, 55.0], [21.3, 55.0], [21.4, 56.0], [21.5, 57.0], [21.6, 58.0], [21.7, 59.0], [21.8, 60.0], [21.9, 62.0], [22.0, 64.0], [22.1, 65.0], [22.2, 67.0], [22.3, 68.0], [22.4, 68.0], [22.5, 69.0], [22.6, 70.0], [22.7, 71.0], [22.8, 73.0], [22.9, 74.0], [23.0, 75.0], [23.1, 76.0], [23.2, 77.0], [23.3, 79.0], [23.4, 80.0], [23.5, 81.0], [23.6, 82.0], [23.7, 83.0], [23.8, 85.0], [23.9, 86.0], [24.0, 87.0], [24.1, 89.0], [24.2, 89.0], [24.3, 90.0], [24.4, 91.0], [24.5, 92.0], [24.6, 94.0], [24.7, 95.0], [24.8, 96.0], [24.9, 97.0], [25.0, 101.0], [25.1, 103.0], [25.2, 104.0], [25.3, 105.0], [25.4, 106.0], [25.5, 107.0], [25.6, 108.0], [25.7, 110.0], [25.8, 112.0], [25.9, 114.0], [26.0, 116.0], [26.1, 117.0], [26.2, 118.0], [26.3, 119.0], [26.4, 121.0], [26.5, 124.0], [26.6, 125.0], [26.7, 126.0], [26.8, 128.0], [26.9, 130.0], [27.0, 131.0], [27.1, 133.0], [27.2, 134.0], [27.3, 135.0], [27.4, 136.0], [27.5, 137.0], [27.6, 140.0], [27.7, 143.0], [27.8, 145.0], [27.9, 146.0], [28.0, 147.0], [28.1, 149.0], [28.2, 153.0], [28.3, 156.0], [28.4, 157.0], [28.5, 160.0], [28.6, 162.0], [28.7, 164.0], [28.8, 166.0], [28.9, 167.0], [29.0, 169.0], [29.1, 171.0], [29.2, 172.0], [29.3, 173.0], [29.4, 174.0], [29.5, 176.0], [29.6, 179.0], [29.7, 180.0], [29.8, 181.0], [29.9, 183.0], [30.0, 184.0], [30.1, 186.0], [30.2, 187.0], [30.3, 190.0], [30.4, 192.0], [30.5, 194.0], [30.6, 198.0], [30.7, 200.0], [30.8, 202.0], [30.9, 206.0], [31.0, 207.0], [31.1, 209.0], [31.2, 210.0], [31.3, 212.0], [31.4, 214.0], [31.5, 216.0], [31.6, 220.0], [31.7, 223.0], [31.8, 224.0], [31.9, 226.0], [32.0, 230.0], [32.1, 234.0], [32.2, 236.0], [32.3, 238.0], [32.4, 239.0], [32.5, 242.0], [32.6, 243.0], [32.7, 244.0], [32.8, 246.0], [32.9, 247.0], [33.0, 249.0], [33.1, 254.0], [33.2, 256.0], [33.3, 258.0], [33.4, 259.0], [33.5, 262.0], [33.6, 265.0], [33.7, 268.0], [33.8, 270.0], [33.9, 272.0], [34.0, 274.0], [34.1, 275.0], [34.2, 276.0], [34.3, 281.0], [34.4, 283.0], [34.5, 284.0], [34.6, 287.0], [34.7, 289.0], [34.8, 292.0], [34.9, 295.0], [35.0, 297.0], [35.1, 299.0], [35.2, 302.0], [35.3, 305.0], [35.4, 308.0], [35.5, 311.0], [35.6, 315.0], [35.7, 317.0], [35.8, 319.0], [35.9, 323.0], [36.0, 324.0], [36.1, 326.0], [36.2, 328.0], [36.3, 331.0], [36.4, 334.0], [36.5, 336.0], [36.6, 340.0], [36.7, 344.0], [36.8, 345.0], [36.9, 348.0], [37.0, 352.0], [37.1, 354.0], [37.2, 359.0], [37.3, 363.0], [37.4, 366.0], [37.5, 369.0], [37.6, 373.0], [37.7, 378.0], [37.8, 382.0], [37.9, 388.0], [38.0, 391.0], [38.1, 396.0], [38.2, 403.0], [38.3, 405.0], [38.4, 412.0], [38.5, 415.0], [38.6, 416.0], [38.7, 421.0], [38.8, 422.0], [38.9, 426.0], [39.0, 431.0], [39.1, 432.0], [39.2, 434.0], [39.3, 436.0], [39.4, 437.0], [39.5, 439.0], [39.6, 443.0], [39.7, 447.0], [39.8, 450.0], [39.9, 453.0], [40.0, 455.0], [40.1, 459.0], [40.2, 464.0], [40.3, 470.0], [40.4, 474.0], [40.5, 477.0], [40.6, 483.0], [40.7, 487.0], [40.8, 490.0], [40.9, 494.0], [41.0, 496.0], [41.1, 498.0], [41.2, 500.0], [41.3, 505.0], [41.4, 509.0], [41.5, 515.0], [41.6, 522.0], [41.7, 526.0], [41.8, 530.0], [41.9, 536.0], [42.0, 538.0], [42.1, 542.0], [42.2, 550.0], [42.3, 554.0], [42.4, 557.0], [42.5, 559.0], [42.6, 562.0], [42.7, 568.0], [42.8, 579.0], [42.9, 581.0], [43.0, 583.0], [43.1, 585.0], [43.2, 588.0], [43.3, 593.0], [43.4, 603.0], [43.5, 608.0], [43.6, 613.0], [43.7, 618.0], [43.8, 624.0], [43.9, 626.0], [44.0, 629.0], [44.1, 637.0], [44.2, 640.0], [44.3, 643.0], [44.4, 646.0], [44.5, 647.0], [44.6, 650.0], [44.7, 652.0], [44.8, 655.0], [44.9, 660.0], [45.0, 669.0], [45.1, 674.0], [45.2, 678.0], [45.3, 682.0], [45.4, 687.0], [45.5, 702.0], [45.6, 711.0], [45.7, 722.0], [45.8, 731.0], [45.9, 740.0], [46.0, 752.0], [46.1, 755.0], [46.2, 758.0], [46.3, 762.0], [46.4, 775.0], [46.5, 785.0], [46.6, 792.0], [46.7, 797.0], [46.8, 804.0], [46.9, 805.0], [47.0, 815.0], [47.1, 818.0], [47.2, 823.0], [47.3, 828.0], [47.4, 835.0], [47.5, 838.0], [47.6, 842.0], [47.7, 844.0], [47.8, 850.0], [47.9, 852.0], [48.0, 858.0], [48.1, 865.0], [48.2, 901.0], [48.3, 911.0], [48.4, 924.0], [48.5, 925.0], [48.6, 934.0], [48.7, 946.0], [48.8, 951.0], [48.9, 976.0], [49.0, 980.0], [49.1, 992.0], [49.2, 1001.0], [49.3, 1004.0], [49.4, 1008.0], [49.5, 1019.0], [49.6, 1026.0], [49.7, 1029.0], [49.8, 1035.0], [49.9, 1039.0], [50.0, 1045.0], [50.1, 1058.0], [50.2, 1065.0], [50.3, 1077.0], [50.4, 1089.0], [50.5, 1110.0], [50.6, 1122.0], [50.7, 1132.0], [50.8, 1140.0], [50.9, 1156.0], [51.0, 1162.0], [51.1, 1178.0], [51.2, 1183.0], [51.3, 1190.0], [51.4, 1209.0], [51.5, 1226.0], [51.6, 1239.0], [51.7, 1259.0], [51.8, 1287.0], [51.9, 1301.0], [52.0, 1305.0], [52.1, 1330.0], [52.2, 1341.0], [52.3, 1366.0], [52.4, 1394.0], [52.5, 1410.0], [52.6, 1451.0], [52.7, 1494.0], [52.8, 1506.0], [52.9, 1516.0], [53.0, 1522.0], [53.1, 1551.0], [53.2, 1586.0], [53.3, 1626.0], [53.4, 1653.0], [53.5, 1673.0], [53.6, 1713.0], [53.7, 1752.0], [53.8, 1771.0], [53.9, 1776.0], [54.0, 1789.0], [54.1, 1797.0], [54.2, 1826.0], [54.3, 1839.0], [54.4, 1849.0], [54.5, 1867.0], [54.6, 1898.0], [54.7, 1931.0], [54.8, 1966.0], [54.9, 1975.0], [55.0, 1982.0], [55.1, 1994.0], [55.2, 2005.0], [55.3, 2020.0], [55.4, 2050.0], [55.5, 2068.0], [55.6, 2076.0], [55.7, 2080.0], [55.8, 2103.0], [55.9, 2113.0], [56.0, 2120.0], [56.1, 2144.0], [56.2, 2212.0], [56.3, 2219.0], [56.4, 2240.0], [56.5, 2258.0], [56.6, 2284.0], [56.7, 2325.0], [56.8, 2333.0], [56.9, 2344.0], [57.0, 2363.0], [57.1, 2378.0], [57.2, 2443.0], [57.3, 2480.0], [57.4, 2507.0], [57.5, 2521.0], [57.6, 2523.0], [57.7, 2534.0], [57.8, 2554.0], [57.9, 2575.0], [58.0, 2595.0], [58.1, 2608.0], [58.2, 2624.0], [58.3, 2643.0], [58.4, 2678.0], [58.5, 2695.0], [58.6, 2701.0], [58.7, 2706.0], [58.8, 2722.0], [58.9, 2730.0], [59.0, 2742.0], [59.1, 2753.0], [59.2, 2780.0], [59.3, 2787.0], [59.4, 2798.0], [59.5, 2816.0], [59.6, 2826.0], [59.7, 2848.0], [59.8, 2868.0], [59.9, 2881.0], [60.0, 2904.0], [60.1, 2928.0], [60.2, 2941.0], [60.3, 2953.0], [60.4, 2964.0], [60.5, 2968.0], [60.6, 2976.0], [60.7, 2989.0], [60.8, 3000.0], [60.9, 3012.0], [61.0, 3026.0], [61.1, 3033.0], [61.2, 3042.0], [61.3, 3050.0], [61.4, 3062.0], [61.5, 3071.0], [61.6, 3097.0], [61.7, 3100.0], [61.8, 3106.0], [61.9, 3114.0], [62.0, 3132.0], [62.1, 3139.0], [62.2, 3153.0], [62.3, 3174.0], [62.4, 3185.0], [62.5, 3201.0], [62.6, 3214.0], [62.7, 3221.0], [62.8, 3237.0], [62.9, 3249.0], [63.0, 3250.0], [63.1, 3261.0], [63.2, 3272.0], [63.3, 3284.0], [63.4, 3293.0], [63.5, 3319.0], [63.6, 3325.0], [63.7, 3332.0], [63.8, 3344.0], [63.9, 3353.0], [64.0, 3361.0], [64.1, 3376.0], [64.2, 3380.0], [64.3, 3393.0], [64.4, 3401.0], [64.5, 3418.0], [64.6, 3430.0], [64.7, 3452.0], [64.8, 3475.0], [64.9, 3488.0], [65.0, 3507.0], [65.1, 3521.0], [65.2, 3541.0], [65.3, 3570.0], [65.4, 3581.0], [65.5, 3597.0], [65.6, 3609.0], [65.7, 3619.0], [65.8, 3629.0], [65.9, 3646.0], [66.0, 3653.0], [66.1, 3658.0], [66.2, 3669.0], [66.3, 3682.0], [66.4, 3698.0], [66.5, 3707.0], [66.6, 3717.0], [66.7, 3721.0], [66.8, 3727.0], [66.9, 3733.0], [67.0, 3741.0], [67.1, 3747.0], [67.2, 3756.0], [67.3, 3766.0], [67.4, 3774.0], [67.5, 3779.0], [67.6, 3789.0], [67.7, 3797.0], [67.8, 3802.0], [67.9, 3820.0], [68.0, 3830.0], [68.1, 3846.0], [68.2, 3853.0], [68.3, 3871.0], [68.4, 3885.0], [68.5, 3896.0], [68.6, 3912.0], [68.7, 3936.0], [68.8, 3951.0], [68.9, 3969.0], [69.0, 3975.0], [69.1, 3990.0], [69.2, 4008.0], [69.3, 4016.0], [69.4, 4038.0], [69.5, 4040.0], [69.6, 4050.0], [69.7, 4053.0], [69.8, 4057.0], [69.9, 4058.0], [70.0, 4061.0], [70.1, 4065.0], [70.2, 4072.0], [70.3, 4079.0], [70.4, 4089.0], [70.5, 4099.0], [70.6, 4108.0], [70.7, 4119.0], [70.8, 4132.0], [70.9, 4148.0], [71.0, 4161.0], [71.1, 4171.0], [71.2, 4181.0], [71.3, 4188.0], [71.4, 4192.0], [71.5, 4204.0], [71.6, 4213.0], [71.7, 4220.0], [71.8, 4225.0], [71.9, 4231.0], [72.0, 4237.0], [72.1, 4241.0], [72.2, 4247.0], [72.3, 4257.0], [72.4, 4260.0], [72.5, 4265.0], [72.6, 4268.0], [72.7, 4277.0], [72.8, 4280.0], [72.9, 4289.0], [73.0, 4293.0], [73.1, 4296.0], [73.2, 4304.0], [73.3, 4317.0], [73.4, 4323.0], [73.5, 4333.0], [73.6, 4344.0], [73.7, 4357.0], [73.8, 4366.0], [73.9, 4373.0], [74.0, 4379.0], [74.1, 4384.0], [74.2, 4399.0], [74.3, 4407.0], [74.4, 4415.0], [74.5, 4421.0], [74.6, 4426.0], [74.7, 4429.0], [74.8, 4443.0], [74.9, 4452.0], [75.0, 4461.0], [75.1, 4468.0], [75.2, 4476.0], [75.3, 4484.0], [75.4, 4488.0], [75.5, 4499.0], [75.6, 4502.0], [75.7, 4506.0], [75.8, 4518.0], [75.9, 4530.0], [76.0, 4539.0], [76.1, 4549.0], [76.2, 4555.0], [76.3, 4562.0], [76.4, 4577.0], [76.5, 4579.0], [76.6, 4587.0], [76.7, 4595.0], [76.8, 4603.0], [76.9, 4610.0], [77.0, 4621.0], [77.1, 4638.0], [77.2, 4648.0], [77.3, 4654.0], [77.4, 4661.0], [77.5, 4665.0], [77.6, 4678.0], [77.7, 4689.0], [77.8, 4703.0], [77.9, 4712.0], [78.0, 4719.0], [78.1, 4728.0], [78.2, 4732.0], [78.3, 4736.0], [78.4, 4746.0], [78.5, 4755.0], [78.6, 4763.0], [78.7, 4781.0], [78.8, 4787.0], [78.9, 4802.0], [79.0, 4813.0], [79.1, 4826.0], [79.2, 4833.0], [79.3, 4847.0], [79.4, 4859.0], [79.5, 4872.0], [79.6, 4881.0], [79.7, 4893.0], [79.8, 4898.0], [79.9, 4910.0], [80.0, 4920.0], [80.1, 4937.0], [80.2, 4955.0], [80.3, 4959.0], [80.4, 4964.0], [80.5, 4987.0], [80.6, 5004.0], [80.7, 5017.0], [80.8, 5023.0], [80.9, 5031.0], [81.0, 5038.0], [81.1, 5042.0], [81.2, 5052.0], [81.3, 5064.0], [81.4, 5071.0], [81.5, 5076.0], [81.6, 5083.0], [81.7, 5087.0], [81.8, 5094.0], [81.9, 5104.0], [82.0, 5108.0], [82.1, 5116.0], [82.2, 5129.0], [82.3, 5135.0], [82.4, 5140.0], [82.5, 5152.0], [82.6, 5157.0], [82.7, 5162.0], [82.8, 5182.0], [82.9, 5192.0], [83.0, 5202.0], [83.1, 5210.0], [83.2, 5214.0], [83.3, 5243.0], [83.4, 5253.0], [83.5, 5270.0], [83.6, 5280.0], [83.7, 5299.0], [83.8, 5310.0], [83.9, 5324.0], [84.0, 5345.0], [84.1, 5356.0], [84.2, 5370.0], [84.3, 5411.0], [84.4, 5431.0], [84.5, 5438.0], [84.6, 5455.0], [84.7, 5487.0], [84.8, 5504.0], [84.9, 5519.0], [85.0, 5543.0], [85.1, 5561.0], [85.2, 5578.0], [85.3, 5594.0], [85.4, 5612.0], [85.5, 5640.0], [85.6, 5650.0], [85.7, 5662.0], [85.8, 5673.0], [85.9, 5696.0], [86.0, 5707.0], [86.1, 5717.0], [86.2, 5734.0], [86.3, 5751.0], [86.4, 5763.0], [86.5, 5766.0], [86.6, 5786.0], [86.7, 5793.0], [86.8, 5801.0], [86.9, 5817.0], [87.0, 5823.0], [87.1, 5828.0], [87.2, 5840.0], [87.3, 5853.0], [87.4, 5881.0], [87.5, 5896.0], [87.6, 5917.0], [87.7, 5949.0], [87.8, 5966.0], [87.9, 5974.0], [88.0, 5993.0], [88.1, 6023.0], [88.2, 6074.0], [88.3, 6105.0], [88.4, 6122.0], [88.5, 6144.0], [88.6, 6164.0], [88.7, 6179.0], [88.8, 6209.0], [88.9, 6244.0], [89.0, 6279.0], [89.1, 6298.0], [89.2, 6330.0], [89.3, 6349.0], [89.4, 6361.0], [89.5, 6387.0], [89.6, 6394.0], [89.7, 6421.0], [89.8, 6474.0], [89.9, 6519.0], [90.0, 6544.0], [90.1, 6581.0], [90.2, 6612.0], [90.3, 6624.0], [90.4, 6650.0], [90.5, 6664.0], [90.6, 6678.0], [90.7, 6691.0], [90.8, 6722.0], [90.9, 6752.0], [91.0, 6768.0], [91.1, 6784.0], [91.2, 6814.0], [91.3, 6835.0], [91.4, 6870.0], [91.5, 6949.0], [91.6, 6971.0], [91.7, 7020.0], [91.8, 7052.0], [91.9, 7084.0], [92.0, 7164.0], [92.1, 7227.0], [92.2, 7294.0], [92.3, 7415.0], [92.4, 7453.0], [92.5, 7489.0], [92.6, 7552.0], [92.7, 7597.0], [92.8, 7629.0], [92.9, 7667.0], [93.0, 7709.0], [93.1, 7749.0], [93.2, 7816.0], [93.3, 7857.0], [93.4, 7944.0], [93.5, 7950.0], [93.6, 8020.0], [93.7, 8101.0], [93.8, 8223.0], [93.9, 8346.0], [94.0, 8423.0], [94.1, 8447.0], [94.2, 8465.0], [94.3, 8577.0], [94.4, 8620.0], [94.5, 8667.0], [94.6, 8728.0], [94.7, 8757.0], [94.8, 8798.0], [94.9, 8823.0], [95.0, 8849.0], [95.1, 8883.0], [95.2, 9040.0], [95.3, 9175.0], [95.4, 9268.0], [95.5, 9309.0], [95.6, 9398.0], [95.7, 9501.0], [95.8, 9551.0], [95.9, 9653.0], [96.0, 9771.0], [96.1, 9849.0], [96.2, 9862.0], [96.3, 9912.0], [96.4, 10132.0], [96.5, 10315.0], [96.6, 10381.0], [96.7, 10535.0], [96.8, 10658.0], [96.9, 10882.0], [97.0, 11005.0], [97.1, 11017.0], [97.2, 11131.0], [97.3, 11176.0], [97.4, 11299.0], [97.5, 11420.0], [97.6, 11571.0], [97.7, 11696.0], [97.8, 12056.0], [97.9, 12170.0], [98.0, 12338.0], [98.1, 12404.0], [98.2, 12890.0], [98.3, 13279.0], [98.4, 13718.0], [98.5, 14185.0], [98.6, 14259.0], [98.7, 14389.0], [98.8, 14554.0], [98.9, 14848.0], [99.0, 15080.0], [99.1, 15756.0], [99.2, 16190.0], [99.3, 17477.0], [99.4, 18880.0], [99.5, 19356.0], [99.6, 20449.0], [99.7, 21170.0], [99.8, 22833.0], [99.9, 31265.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1497.0, "series": [{"data": [[0.0, 1497.0], [100.0, 342.0], [35100.0, 1.0], [37100.0, 1.0], [200.0, 267.0], [300.0, 184.0], [400.0, 182.0], [500.0, 132.0], [600.0, 125.0], [700.0, 75.0], [800.0, 88.0], [900.0, 58.0], [1000.0, 78.0], [1100.0, 55.0], [1200.0, 29.0], [1300.0, 37.0], [1400.0, 17.0], [1500.0, 30.0], [1600.0, 17.0], [1700.0, 34.0], [1800.0, 31.0], [1900.0, 32.0], [2000.0, 37.0], [2100.0, 24.0], [2200.0, 27.0], [2300.0, 29.0], [2400.0, 15.0], [2500.0, 40.0], [2600.0, 30.0], [2700.0, 53.0], [2800.0, 35.0], [2900.0, 48.0], [3000.0, 54.0], [3100.0, 46.0], [3200.0, 59.0], [3300.0, 56.0], [3400.0, 35.0], [3500.0, 33.0], [3600.0, 54.0], [3700.0, 80.0], [3800.0, 47.0], [3900.0, 39.0], [4000.0, 80.0], [4100.0, 58.0], [4200.0, 100.0], [4300.0, 64.0], [4400.0, 78.0], [4500.0, 76.0], [4600.0, 60.0], [4700.0, 66.0], [4800.0, 57.0], [4900.0, 45.0], [5000.0, 77.0], [5100.0, 67.0], [5200.0, 44.0], [5300.0, 33.0], [5600.0, 36.0], [5500.0, 33.0], [5400.0, 31.0], [5700.0, 51.0], [5800.0, 44.0], [6100.0, 30.0], [5900.0, 32.0], [6000.0, 14.0], [6200.0, 20.0], [6300.0, 31.0], [6500.0, 20.0], [6400.0, 14.0], [6600.0, 34.0], [6800.0, 17.0], [6700.0, 25.0], [6900.0, 13.0], [7100.0, 9.0], [7000.0, 14.0], [7200.0, 9.0], [7400.0, 14.0], [7300.0, 4.0], [7500.0, 13.0], [7600.0, 16.0], [7800.0, 9.0], [7900.0, 15.0], [7700.0, 11.0], [8000.0, 6.0], [8100.0, 5.0], [8400.0, 17.0], [8500.0, 7.0], [8700.0, 17.0], [8200.0, 7.0], [8600.0, 10.0], [8300.0, 5.0], [9200.0, 11.0], [8800.0, 18.0], [9000.0, 7.0], [8900.0, 3.0], [9100.0, 2.0], [9400.0, 5.0], [9600.0, 7.0], [9700.0, 5.0], [9300.0, 7.0], [9500.0, 9.0], [9800.0, 15.0], [10000.0, 1.0], [9900.0, 3.0], [10100.0, 5.0], [10200.0, 3.0], [10300.0, 7.0], [10400.0, 4.0], [10500.0, 6.0], [10600.0, 3.0], [10700.0, 2.0], [11100.0, 8.0], [11000.0, 13.0], [10800.0, 3.0], [11200.0, 5.0], [10900.0, 4.0], [11500.0, 1.0], [11300.0, 2.0], [11400.0, 9.0], [11600.0, 6.0], [11700.0, 1.0], [11900.0, 2.0], [12100.0, 6.0], [12000.0, 4.0], [11800.0, 1.0], [12200.0, 1.0], [12400.0, 5.0], [12300.0, 6.0], [12700.0, 2.0], [12600.0, 1.0], [12800.0, 1.0], [13000.0, 3.0], [13200.0, 3.0], [13300.0, 1.0], [13400.0, 3.0], [13700.0, 2.0], [13800.0, 1.0], [13600.0, 1.0], [14300.0, 2.0], [14200.0, 10.0], [14000.0, 3.0], [14100.0, 1.0], [14400.0, 5.0], [14500.0, 2.0], [14800.0, 7.0], [14700.0, 1.0], [15000.0, 4.0], [15100.0, 3.0], [15400.0, 1.0], [15700.0, 2.0], [15900.0, 3.0], [16100.0, 1.0], [16000.0, 1.0], [16700.0, 1.0], [16400.0, 1.0], [16800.0, 2.0], [16900.0, 1.0], [17400.0, 1.0], [17500.0, 1.0], [17600.0, 1.0], [18300.0, 1.0], [18500.0, 1.0], [18800.0, 1.0], [19100.0, 3.0], [19300.0, 2.0], [18600.0, 1.0], [19200.0, 1.0], [19600.0, 2.0], [20400.0, 1.0], [20100.0, 1.0], [20000.0, 1.0], [20200.0, 1.0], [20500.0, 1.0], [20800.0, 1.0], [21100.0, 3.0], [20700.0, 2.0], [21400.0, 1.0], [22100.0, 1.0], [21700.0, 1.0], [22400.0, 1.0], [23100.0, 1.0], [22800.0, 1.0], [23900.0, 1.0], [26000.0, 1.0], [28100.0, 1.0], [31200.0, 1.0], [31000.0, 1.0], [32400.0, 1.0], [35600.0, 1.0], [41400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 41400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 585.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 2821.0, "series": [{"data": [[0.0, 1179.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 585.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 2821.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [[3.0, 1415.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.431818181818183, "minX": 1.65343944E12, "maxY": 1044.5248488918744, "series": [{"data": [[1.65343944E12, 1044.5248488918744], [1.6534395E12, 9.431818181818183]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6534395E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 35390.5, "series": [{"data": [[2.0, 12373.666666666668], [3.0, 2.0], [4.0, 35390.5], [6.0, 10581.5], [9.0, 10414.285714285714], [10.0, 9399.333333333332], [12.0, 9664.0], [13.0, 8691.0], [14.0, 20090.0], [15.0, 7996.0], [16.0, 7494.0], [17.0, 7615.666666666666], [18.0, 18345.0], [19.0, 4.0], [20.0, 4.0], [21.0, 3.0], [22.0, 9600.999999999998], [23.0, 7066.666666666666], [24.0, 4.0], [26.0, 4.0], [27.0, 9401.555555555555], [28.0, 1.5], [29.0, 18847.5], [30.0, 3.0], [31.0, 4.0], [33.0, 10680.42857142857], [32.0, 2.0], [35.0, 2.0], [34.0, 2.0], [36.0, 8579.833333333334], [43.0, 2.0], [42.0, 11817.874999999998], [45.0, 12756.666666666666], [47.0, 7.0], [46.0, 16875.5], [48.0, 7640.2], [51.0, 14250.0], [50.0, 14082.5], [53.0, 14246.0], [52.0, 14259.0], [54.0, 14893.0], [57.0, 2.0], [56.0, 13444.5], [59.0, 13683.0], [58.0, 7030.0], [61.0, 4.0], [60.0, 14077.0], [63.0, 2.0], [62.0, 6608.8], [67.0, 12884.833333333334], [65.0, 0.0], [64.0, 3.0], [69.0, 8708.5], [68.0, 1.0], [75.0, 3.0], [74.0, 9657.5], [73.0, 6262.0], [72.0, 6.666666666666667], [78.0, 12863.5], [76.0, 1.0], [83.0, 11043.0], [80.0, 11241.25], [87.0, 5191.0], [86.0, 6389.599999999999], [85.0, 4.0], [84.0, 5.0], [91.0, 9119.0], [90.0, 11168.0], [89.0, 4.0], [88.0, 12577.0], [95.0, 11333.0], [94.0, 11071.0], [93.0, 4669.666666666666], [92.0, 10167.0], [99.0, 5.0], [97.0, 6394.200000000001], [96.0, 2.0], [103.0, 1.0], [102.0, 13208.5], [101.0, 1.0], [100.0, 4.0], [107.0, 10495.0], [106.0, 9401.333333333334], [105.0, 3.0], [104.0, 12601.0], [111.0, 9888.0], [110.0, 10942.0], [109.0, 7.0], [108.0, 4734.0], [115.0, 3.0], [114.0, 10544.333333333334], [112.0, 4758.0], [119.0, 10780.333333333334], [117.0, 5738.666666666667], [123.0, 3.0], [121.0, 4797.333333333334], [120.0, 4485.333333333334], [127.0, 0.0], [126.0, 10540.666666666666], [124.0, 2.5], [135.0, 10333.0], [134.0, 5296.333333333333], [133.0, 7945.0], [131.0, 9525.0], [130.0, 3.0], [129.0, 11216.2], [143.0, 10415.5], [142.0, 11272.5], [141.0, 2756.0], [140.0, 9268.0], [139.0, 7746.0], [138.0, 4764.0], [137.0, 4.0], [136.0, 3.0], [151.0, 4.0], [150.0, 5789.0], [149.0, 2.0], [148.0, 4746.0], [147.0, 4854.666666666666], [146.0, 6366.0], [145.0, 6.0], [144.0, 5.0], [159.0, 8431.0], [158.0, 8432.0], [157.0, 4769.0], [156.0, 9866.5], [154.0, 4753.333333333334], [153.0, 7136.333333333333], [152.0, 3.0], [167.0, 6814.0], [166.0, 8250.333333333334], [164.0, 1.5], [163.0, 7457.0], [162.0, 7459.0], [161.0, 7489.0], [160.0, 6171.0], [175.0, 6189.125], [183.0, 4.0], [182.0, 4.0], [181.0, 4507.4], [180.0, 2.0], [179.0, 12337.0], [178.0, 12338.0], [177.0, 12338.0], [176.0, 12338.0], [191.0, 3.0], [190.0, 3410.666666666667], [189.0, 5974.0], [188.0, 4932.0], [187.0, 2.5], [185.0, 8746.666666666666], [184.0, 2656.4], [198.0, 12398.0], [197.0, 11.0], [196.0, 16.0], [195.0, 16.0], [194.0, 17.0], [193.0, 14.0], [192.0, 5224.799999999999], [207.0, 3375.333333333333], [206.0, 4014.0], [205.0, 5060.555555555556], [204.0, 5.0], [203.0, 5570.5], [202.0, 8949.666666666666], [201.0, 7242.0], [200.0, 1281.75], [215.0, 24.0], [214.0, 15.5], [212.0, 5639.0], [210.0, 8346.0], [209.0, 4468.5], [223.0, 7.333333333333333], [220.0, 5503.5], [219.0, 11396.5], [218.0, 3850.083333333334], [216.0, 10.0], [231.0, 7857.0], [230.0, 3700.0], [229.0, 3431.0], [228.0, 3515.666666666667], [227.0, 4297.666666666666], [226.0, 12159.666666666666], [225.0, 3719.0], [224.0, 5.0], [232.0, 1804.571428571429], [239.0, 1399.0], [238.0, 6240.5], [237.0, 1.5], [236.0, 6.0], [235.0, 1003.0], [234.0, 1002.0], [233.0, 5771.0], [240.0, 2714.363636363636], [241.0, 735.0], [247.0, 5461.5], [245.0, 6540.0], [244.0, 2850.0], [243.0, 1002.0], [242.0, 3230.666666666667], [248.0, 352.1666666666667], [249.0, 106.0], [250.0, 3145.0], [252.0, 491.6666666666667], [253.0, 564.0], [255.0, 96.8], [254.0, 1004.0], [251.0, 4522.0], [270.0, 15.0], [256.0, 3795.5], [263.0, 134.0], [262.0, 17.0], [261.0, 6230.666666666666], [260.0, 3.0], [257.0, 139.3529411764706], [271.0, 51.0], [269.0, 6283.333333333334], [268.0, 92.0], [259.0, 3003.0], [258.0, 3870.333333333333], [267.0, 127.0], [266.0, 12.666666666666666], [265.0, 15.0], [264.0, 135.0], [285.0, 45.0], [274.0, 62.5], [275.0, 65.0], [276.0, 1066.5], [277.0, 112.25], [279.0, 54.0], [273.0, 57.0], [272.0, 94.0], [278.0, 55.0], [281.0, 1903.3333333333333], [280.0, 2065.0], [283.0, 3856.666666666667], [287.0, 2817.5], [286.0, 64.0], [284.0, 68.0], [301.0, 2667.25], [289.0, 1391.25], [290.0, 72.0], [295.0, 3774.5], [294.0, 2230.0], [293.0, 66.0], [292.0, 75.0], [299.0, 2723.571428571429], [300.0, 5909.25], [291.0, 92.0], [302.0, 611.6666666666666], [303.0, 556.0], [298.0, 46.0], [297.0, 3163.75], [296.0, 4252.0], [317.0, 291.0], [311.0, 124.0], [305.0, 684.7142857142857], [304.0, 5429.0], [306.0, 6215.0], [316.0, 111.0], [307.0, 5083.0], [308.0, 2033.1666666666665], [312.0, 4851.400000000001], [313.0, 91.0], [315.0, 108.0], [314.0, 90.0], [310.0, 97.5], [309.0, 110.33333333333333], [319.0, 1133.0], [318.0, 2129.0], [320.0, 212.5], [323.0, 159.33333333333334], [322.0, 6393.0], [321.0, 1506.0], [332.0, 2357.25], [324.0, 52.33333333333333], [325.0, 2014.4444444444443], [326.0, 173.0], [327.0, 5637.8], [329.0, 237.33333333333334], [330.0, 515.5], [331.0, 1769.0], [333.0, 180.0], [335.0, 76.0], [328.0, 3457.0], [334.0, 80.0], [349.0, 94.0], [351.0, 3922.0], [346.0, 3134.3333333333335], [350.0, 103.0], [348.0, 121.0], [338.0, 3231.666666666667], [337.0, 112.5], [336.0, 1800.6], [347.0, 74.0], [345.0, 5660.5], [342.0, 133.0], [341.0, 6694.666666666666], [340.0, 3005.5], [364.0, 126.33333333333333], [353.0, 1338.7142857142858], [352.0, 4960.0], [355.0, 7799.2], [354.0, 82.0], [366.0, 4746.5], [363.0, 6238.5], [362.0, 5895.0], [361.0, 1368.0], [360.0, 2550.0], [359.0, 2760.0], [358.0, 157.0], [357.0, 5313.0], [356.0, 55.0], [381.0, 871.0], [383.0, 8849.0], [380.0, 437.2], [369.0, 3951.333333333333], [368.0, 181.0], [379.0, 174.0], [378.0, 173.0], [377.0, 7730.0], [376.0, 209.0], [375.0, 216.0], [374.0, 1525.2], [399.0, 431.6666666666667], [394.0, 867.6], [398.0, 456.5], [397.0, 4685.0], [396.0, 280.5], [387.0, 213.0], [386.0, 4747.0], [384.0, 2283.25], [395.0, 525.0], [393.0, 3768.0], [392.0, 2808.0], [391.0, 194.0], [390.0, 247.0], [389.0, 247.0], [388.0, 3053.0], [414.0, 172.0], [409.0, 1510.5], [400.0, 906.8181818181818], [401.0, 3536.5], [403.0, 244.0], [402.0, 5330.0], [410.0, 457.6666666666667], [415.0, 485.0], [411.0, 3540.0], [408.0, 2443.0], [407.0, 1538.0], [406.0, 1559.0], [404.0, 243.0], [429.0, 547.0], [427.0, 507.25], [431.0, 3149.4], [430.0, 515.0], [428.0, 4038.3333333333335], [419.0, 4744.0], [418.0, 5749.0], [417.0, 4048.25], [423.0, 0.0], [422.0, 7348.0], [421.0, 5736.5], [420.0, 4258.0], [433.0, 554.0], [436.0, 3362.25], [437.0, 303.0], [439.0, 1402.8000000000002], [438.0, 3395.333333333333], [443.0, 110.00000000000001], [444.0, 954.0], [434.0, 4673.0], [445.0, 581.0], [447.0, 4580.5], [442.0, 316.2142857142857], [441.0, 226.0], [440.0, 2625.75], [460.0, 598.0], [448.0, 2637.75], [451.0, 637.0], [450.0, 4877.0], [449.0, 2722.5], [454.0, 2154.5], [453.0, 5016.0], [452.0, 4915.5], [455.0, 8004.0], [456.0, 1734.75], [458.0, 1572.3333333333335], [457.0, 445.0], [459.0, 470.0], [461.0, 3359.0], [462.0, 412.0], [466.0, 3975.5714285714284], [470.0, 2594.833333333333], [465.0, 212.25], [479.0, 5861.0], [478.0, 5162.0], [477.0, 4312.5], [467.0, 3249.0], [474.0, 4508.25], [472.0, 3289.5], [469.0, 2700.0], [468.0, 260.0], [493.0, 1853.25], [481.0, 1146.0], [482.0, 953.25], [480.0, 1185.1666666666665], [485.0, 414.0], [484.0, 1980.0], [489.0, 801.2857142857142], [488.0, 2648.0], [494.0, 1511.3333333333333], [495.0, 586.0], [491.0, 3465.0], [490.0, 4964.0], [510.0, 5766.0], [496.0, 426.9230769230769], [497.0, 1501.0], [499.0, 3721.0], [498.0, 6211.0], [503.0, 869.3333333333334], [501.0, 3192.0], [508.0, 151.8], [509.0, 5157.75], [511.0, 5035.0], [507.0, 370.5], [506.0, 4789.5], [505.0, 1439.6666666666667], [504.0, 4965.0], [514.0, 196.0], [518.0, 119.0], [517.0, 4729.0], [516.0, 6095.25], [515.0, 4049.3333333333335], [519.0, 4386.333333333333], [537.0, 3858.0], [536.0, 2328.0], [521.0, 1674.25], [520.0, 5116.0], [522.0, 1347.75], [523.0, 1861.5], [525.0, 7533.5], [524.0, 299.0], [526.0, 3014.5], [527.0, 4161.0], [512.0, 4443.0], [542.0, 4405.875], [529.0, 6579.5], [528.0, 3461.0], [531.0, 4803.0], [530.0, 5395.0], [533.0, 67.0], [532.0, 5045.0], [535.0, 65.0], [534.0, 4615.0], [540.0, 3322.0], [539.0, 4025.3333333333335], [538.0, 3541.0], [569.0, 493.0], [544.0, 551.5], [545.0, 3273.333333333333], [559.0, 1465.0], [558.0, 4820.333333333333], [557.0, 3067.0], [547.0, 2641.875], [560.0, 4558.0], [566.0, 1204.8], [565.0, 1214.0], [564.0, 4957.0], [563.0, 4960.0], [562.0, 6025.0], [561.0, 5037.0], [568.0, 911.6], [551.0, 980.0], [550.0, 3282.0], [567.0, 870.5], [575.0, 4976.4], [573.0, 5813.333333333333], [571.0, 1761.5], [570.0, 3904.0], [582.0, 1102.2], [585.0, 1395.0], [583.0, 1712.388888888889], [602.0, 3332.6666666666665], [605.0, 4484.0], [604.0, 2001.5], [584.0, 890.909090909091], [580.0, 1282.5], [581.0, 1593.8], [579.0, 1092.0], [578.0, 3721.0], [577.0, 6400.75], [576.0, 1.0], [591.0, 3969.0], [590.0, 3970.0], [589.0, 3968.0], [588.0, 6865.5], [587.0, 1058.0], [586.0, 2936.0], [607.0, 3418.0], [597.0, 6637.571428571428], [595.0, 3998.6], [599.0, 1395.0], [598.0, 4436.0], [606.0, 4810.0], [632.0, 183.0], [613.0, 1009.1428571428571], [611.0, 1098.0], [610.0, 3131.0], [609.0, 3103.0], [608.0, 7510.5], [623.0, 5516.25], [621.0, 3956.0], [619.0, 3397.0], [618.0, 3945.3333333333335], [615.0, 4368.090909090909], [614.0, 730.2], [624.0, 1197.5], [625.0, 2666.0], [627.0, 5291.5], [629.0, 8620.0], [628.0, 2284.0], [630.0, 1298.0], [631.0, 2522.0], [634.0, 186.2], [635.0, 658.0], [636.0, 4738.6], [637.0, 2296.0], [639.0, 3473.5], [633.0, 331.16666666666663], [665.0, 1795.0], [647.0, 3998.0], [640.0, 1190.3333333333333], [641.0, 6650.5], [645.0, 2183.0], [643.0, 1310.5], [655.0, 3377.0], [654.0, 3314.0], [653.0, 5543.0], [652.0, 4304.5], [650.0, 2366.0], [649.0, 2366.0], [648.0, 4713.0], [658.0, 149.0], [669.0, 2194.3333333333335], [667.0, 3284.0], [666.0, 3290.0], [659.0, 3079.0], [661.0, 1066.375], [660.0, 4457.0], [662.0, 1369.2], [663.0, 730.4444444444445], [664.0, 928.6], [676.0, 2885.25], [677.0, 2223.571428571429], [680.0, 2649.6], [681.0, 4309.0], [684.0, 6818.5], [683.0, 2551.6666666666665], [679.0, 1300.0], [685.0, 787.6], [686.0, 1369.1666666666665], [687.0, 3642.875], [675.0, 3268.0], [674.0, 4739.0], [672.0, 3402.666666666667], [688.0, 1030.5833333333333], [700.0, 1260.3333333333333], [699.0, 1310.5], [698.0, 2602.0], [697.0, 2623.5], [702.0, 3190.2], [689.0, 583.5], [691.0, 2889.3333333333335], [693.0, 4180.0], [692.0, 5144.5], [695.0, 4830.0], [694.0, 3322.0], [707.0, 656.9090909090909], [706.0, 278.6666666666667], [708.0, 2794.6666666666665], [704.0, 1336.0], [718.0, 1107.6666666666667], [717.0, 3732.0], [716.0, 3376.0], [719.0, 2244.5], [714.0, 2131.0], [715.0, 285.5], [705.0, 668.5], [709.0, 289.0], [712.0, 526.3636363636364], [713.0, 2129.6], [711.0, 45.66666666666667], [730.0, 3141.0], [727.0, 2222.0], [726.0, 344.0], [725.0, 5544.0], [723.0, 1631.5], [722.0, 4038.0], [721.0, 3059.0], [720.0, 3401.0], [728.0, 3354.0], [710.0, 254.33333333333334], [764.0, 5239.2], [740.0, 4406.333333333333], [751.0, 3748.0], [737.0, 573.0], [736.0, 4399.5], [739.0, 4350.0], [738.0, 2124.0], [747.0, 3602.0], [744.0, 3914.0], [758.0, 1517.0], [767.0, 1712.4285714285716], [766.0, 2404.3333333333335], [762.0, 1587.5], [761.0, 3113.0], [760.0, 3563.625], [743.0, 2182.0], [754.0, 4341.0], [752.0, 4167.0], [774.0, 2280.5], [769.0, 2269.75], [770.0, 2410.5], [773.0, 1456.0], [772.0, 3023.0], [771.0, 3337.0], [782.0, 1833.0], [781.0, 2458.25], [777.0, 2897.3333333333335], [783.0, 4131.4], [784.0, 1624.0], [785.0, 1455.5], [786.0, 1161.6000000000001], [790.0, 220.75000000000003], [788.0, 4312.0], [799.0, 1169.5], [798.0, 1552.0], [797.0, 3057.0], [796.0, 3239.0], [795.0, 4620.0], [792.0, 4951.5], [826.0, 2471.0], [818.0, 775.0], [820.0, 2188.0], [821.0, 2090.75], [822.0, 664.3571428571428], [823.0, 1001.5], [819.0, 161.0], [824.0, 1839.0], [814.0, 4714.666666666667], [801.0, 4361.0], [805.0, 4063.0], [802.0, 3206.0], [807.0, 3741.0], [806.0, 1506.5], [813.0, 3371.3333333333335], [812.0, 3058.0], [811.0, 6327.0], [809.0, 6295.5], [808.0, 3506.0], [825.0, 3070.0], [831.0, 2955.0], [817.0, 915.7499999999999], [816.0, 3539.0], [830.0, 2956.0], [829.0, 3835.0], [828.0, 3840.0], [827.0, 3837.0], [856.0, 3395.0], [861.0, 2350.0], [863.0, 1748.75], [849.0, 3114.0], [848.0, 3361.0], [851.0, 3099.0], [850.0, 3071.0], [860.0, 3366.0], [859.0, 31.0], [857.0, 6606.0], [847.0, 3348.0], [832.0, 1954.0], [834.0, 3871.0], [833.0, 1975.0], [837.0, 5503.0], [836.0, 2359.3333333333335], [839.0, 1252.0], [838.0, 679.0], [846.0, 2973.0], [845.0, 2974.0], [844.0, 5287.666666666666], [842.0, 3174.0], [840.0, 4792.5], [855.0, 3220.0], [854.0, 3096.0], [853.0, 3097.0], [852.0, 3098.0], [878.0, 1524.857142857143], [874.0, 3449.0], [873.0, 3278.0], [872.0, 5112.5], [875.0, 1788.3333333333333], [877.0, 1395.5], [879.0, 1622.8], [867.0, 5552.333333333334], [866.0, 5071.285714285715], [869.0, 844.0], [868.0, 4975.0], [888.0, 5495.666666666667], [871.0, 1.0], [880.0, 805.0], [881.0, 1807.5], [882.0, 1.0], [886.0, 2549.6666666666665], [884.0, 4269.777777777778], [889.0, 259.0], [892.0, 992.375], [893.0, 297.0], [894.0, 3756.333333333333], [895.0, 2586.5], [891.0, 846.375], [890.0, 2285.3333333333335], [925.0, 4270.0], [914.0, 1752.8333333333333], [899.0, 2649.6666666666665], [912.0, 1162.5], [923.0, 406.0], [920.0, 3275.0], [901.0, 2253.0], [900.0, 3201.0], [924.0, 4127.4], [926.0, 3136.0], [927.0, 1531.3333333333335], [911.0, 1397.692307692308], [896.0, 3321.0], [898.0, 2275.0], [897.0, 4578.0], [910.0, 389.66666666666663], [909.0, 3360.5], [908.0, 2152.714285714286], [907.0, 3449.0], [906.0, 2186.5], [905.0, 1995.0], [915.0, 1745.625], [916.0, 1377.6], [917.0, 2409.333333333333], [919.0, 2070.5], [935.0, 5204.555555555556], [957.0, 3126.25], [928.0, 1864.25], [943.0, 5421.0], [942.0, 1988.2499999999998], [941.0, 193.66666666666666], [940.0, 3331.0], [939.0, 4062.5], [937.0, 149.0], [936.0, 31.5], [950.0, 812.0], [951.0, 1928.0], [949.0, 602.2857142857143], [959.0, 3344.5], [945.0, 3671.0], [944.0, 4647.0], [947.0, 805.0], [946.0, 5402.5], [948.0, 4151.0], [955.0, 6069.333333333333], [954.0, 768.0], [953.0, 3904.25], [934.0, 4164.0], [933.0, 2113.0], [932.0, 2106.0], [931.0, 2103.0], [930.0, 3398.0], [929.0, 3136.0], [984.0, 2090.3333333333335], [972.0, 1224.5], [962.0, 1876.5714285714284], [963.0, 3572.0], [965.0, 3576.0], [964.0, 631.0], [967.0, 4171.0], [966.0, 3308.0], [985.0, 1644.0], [986.0, 1118.6666666666665], [987.0, 209.0], [988.0, 3752.75], [991.0, 3154.0], [990.0, 3100.0], [976.0, 1988.0], [977.0, 243.0], [978.0, 1530.8], [979.0, 410.4285714285714], [983.0, 133.66666666666666], [981.0, 2018.9999999999998], [982.0, 80.5], [980.0, 286.3333333333333], [961.0, 2697.0], [968.0, 3529.5], [969.0, 1603.1333333333337], [970.0, 2556.6666666666665], [973.0, 2701.5], [974.0, 1502.3333333333333], [975.0, 2179.666666666667], [960.0, 1654.0], [971.0, 2143.625], [1018.0, 4093.0], [1022.0, 2924.125], [1010.0, 1627.8], [1011.0, 1679.3333333333333], [1012.0, 1375.0], [1013.0, 7877.0], [1015.0, 50.666666666666664], [1014.0, 3137.0], [1021.0, 2347.0], [1023.0, 3043.0], [1008.0, 1569.5], [1009.0, 18.0], [1020.0, 837.0], [1019.0, 3033.0], [1017.0, 3041.0], [1016.0, 80.5], [1007.0, 4911.333333333333], [993.0, 2142.6666666666665], [995.0, 1756.0], [994.0, 4957.5], [997.0, 5234.0], [996.0, 2695.25], [999.0, 4941.0], [998.0, 10.0], [1005.0, 548.3333333333334], [1002.0, 350.0], [1001.0, 3655.25], [1038.0, 2994.0], [1026.0, 2677.0], [1024.0, 3042.0], [1054.0, 2963.0], [1048.0, 3692.0], [1052.0, 314.0], [1028.0, 3089.6666666666665], [1030.0, 2719.666666666667], [1032.0, 1999.0], [1034.0, 1281.8000000000002], [1072.0, 161.0], [1084.0, 403.5], [1078.0, 2686.8], [1076.0, 1.0], [1074.0, 2403.8571428571427], [1086.0, 3748.5], [1056.0, 1199.5], [1058.0, 3827.6666666666665], [1060.0, 3990.0], [1062.0, 948.4], [1064.0, 1640.0], [1066.0, 336.5], [1070.0, 983.0], [1068.0, 296.5], [1042.0, 440.5], [1040.0, 2989.0], [1044.0, 181.0], [1046.0, 689.6666666666666], [1100.0, 4373.4], [1098.0, 3737.0], [1108.0, 1539.6666666666667], [1092.0, 2296.0], [1090.0, 4830.0], [1088.0, 4133.125], [1094.0, 3455.0], [1096.0, 2962.8], [1116.0, 2704.3333333333335], [1136.0, 3042.25], [1138.0, 657.6], [1140.0, 3094.5], [1142.0, 2215.5], [1144.0, 590.3333333333334], [1146.0, 3715.0], [1150.0, 5447.25], [1120.0, 1791.8], [1122.0, 2693.0], [1124.0, 1443.0], [1126.0, 4762.333333333334], [1128.0, 3673.6666666666665], [1134.0, 2175.4285714285716], [1130.0, 2744.75], [1106.0, 1801.0714285714287], [1104.0, 271.0], [1156.0, 70.66666666666667], [1152.0, 1029.1666666666667], [1182.0, 3064.25], [1180.0, 5788.0], [1176.0, 1940.0], [1178.0, 568.0], [1168.0, 1916.0], [1170.0, 2742.0], [1172.0, 3581.0], [1174.0, 210.0], [1154.0, 946.6666666666667], [1158.0, 1538.2857142857142], [1160.0, 1363.142857142857], [1162.0, 2883.0], [1164.0, 1311.0], [1166.0, 1869.0], [1202.0, 4793.666666666666], [1204.0, 3051.2], [1206.0, 1371.0], [1208.0, 282.0], [1212.0, 4945.333333333333], [1214.0, 2551.0], [1184.0, 4007.6666666666665], [1190.0, 1864.75], [1186.0, 5661.5], [1192.0, 3921.0], [1196.0, 1351.5], [1224.0, 1632.0], [1274.0, 1703.2499999999998], [1216.0, 195.0], [1218.0, 2555.0], [1246.0, 93.33333333333333], [1244.0, 95.0], [1242.0, 250.66666666666669], [1240.0, 25.0], [1238.0, 29.0], [1236.0, 4284.142857142857], [1234.0, 3305.1666666666665], [1232.0, 3026.0], [1222.0, 63.0], [1226.0, 118.66666666666666], [1220.0, 2519.923076923077], [1256.0, 3098.0], [1254.0, 5145.5], [1250.0, 104.0], [1248.0, 3634.666666666667], [1258.0, 1.0], [1260.0, 2922.7000000000003], [1268.0, 2961.5], [1270.0, 283.0], [1272.0, 3073.5714285714284], [1278.0, 5665.4], [1276.0, 2969.4], [1262.0, 3441.5], [1264.0, 350.6], [1230.0, 3779.0], [1228.0, 5186.333333333333], [1266.0, 1621.3809523809523], [1290.0, 2660.1428571428573], [1284.0, 4844.0], [1280.0, 4007.0000000000005], [1310.0, 249.0], [1308.0, 1338.0], [1306.0, 1791.1666666666665], [1304.0, 846.75], [1282.0, 2045.0], [1286.0, 1962.8], [1292.0, 3880.6666666666665], [1294.0, 3407.0], [1312.0, 1622.8181818181818], [1342.0, 3073.4], [1340.0, 2995.333333333333], [1336.0, 1529.25], [1334.0, 1092.3750000000002], [1330.0, 967.8571428571429], [1328.0, 1169.3529411764705], [1332.0, 182.4], [1314.0, 2018.235294117647], [1316.0, 1543.2307692307693], [1318.0, 465.3333333333333], [1322.0, 3971.5], [1324.0, 3128.0], [1326.0, 1098.0], [1298.0, 363.0], [1296.0, 2801.5], [1300.0, 1156.0], [1302.0, 1541.6], [1356.0, 1347.0], [1344.0, 1941.6], [1370.0, 1844.666666666667], [1368.0, 2887.777777777778], [1366.0, 838.1111111111111], [1362.0, 3166.0999999999995], [1364.0, 2413.133333333333], [1360.0, 100.0], [1346.0, 3028.0], [1350.0, 749.0], [1358.0, 975.6470588235294], [1392.0, 146.0], [1394.0, 133.0], [1396.0, 125.0], [1382.0, 164.0], [1380.0, 1803.5], [1378.0, 4701.0], [1376.0, 1968.0], [1388.0, 1349.1176470588234], [1390.0, 313.3333333333333], [1406.0, 2121.285714285714], [1404.0, 2569.0625], [1402.0, 2513.3777777777786], [1400.0, 3466.0], [1398.0, 2580.5], [1354.0, 436.0], [1408.0, 6694.0], [1412.0, 1856.0], [1438.0, 2267.2857142857147], [1434.0, 2616.5], [1432.0, 3193.333333333333], [1436.0, 1414.111111111111], [1418.0, 1524.5], [1416.0, 2206.888888888889], [1440.0, 4392.5], [1470.0, 448.66666666666663], [1468.0, 3535.666666666667], [1466.0, 4597.5], [1464.0, 734.0], [1462.0, 2465.3333333333335], [1456.0, 4233.6], [1422.0, 2881.8], [1420.0, 612.0], [1458.0, 3089.9444444444443], [1460.0, 3205.041666666666], [1444.0, 3371.1666666666665], [1446.0, 3016.5], [1448.0, 1.0], [1450.0, 1163.0], [1452.0, 2043.5], [1454.0, 2648.6666666666665], [1442.0, 2636.3181818181815], [1424.0, 3578.75], [1428.0, 1480.636363636364], [1426.0, 1236.4285714285716], [1520.0, 2766.1666666666665], [1528.0, 441.0], [1502.0, 2740.625], [1496.0, 3269.0], [1494.0, 2588.441860465117], [1492.0, 1.9999999999999998], [1490.0, 1891.25], [1488.0, 3418.666666666667], [1498.0, 2522.5], [1500.0, 3615.0], [1524.0, 1469.125], [1522.0, 2652.0], [1472.0, 1735.1666666666665], [1474.0, 1830.7777777777776], [1476.0, 2437.6000000000004], [1480.0, 2298.6], [1482.0, 910.7], [1484.0, 3053.8333333333335], [1526.0, 2003.0], [1530.0, 3097.625], [1532.0, 2068.1818181818185], [1534.0, 816.0], [1518.0, 2818.4444444444443], [1516.0, 3877.5555555555557], [1510.0, 2920.3999999999996], [1508.0, 2975.2727272727275], [1506.0, 3812.666666666667], [1504.0, 4092.5], [1548.0, 1.0], [1538.0, 4260.833333333334], [1546.0, 320.5], [1544.0, 1511.0], [1542.0, 1422.75], [1540.0, 3233.6], [1550.0, 0.0], [1584.0, 394.0], [1588.0, 1333.25], [1590.0, 2144.190476190476], [1592.0, 2400.4], [1594.0, 4149.0], [1566.0, 3647.3333333333335], [1564.0, 1.0], [1562.0, 0.0], [1560.0, 2207.5714285714284], [1558.0, 201.25], [1556.0, 3933.0], [1554.0, 2652.7941176470586], [1568.0, 3697.0363636363636], [1570.0, 2232.4], [1574.0, 90.0], [1572.0, 88.0], [1576.0, 483.0], [1578.0, 509.0], [1580.0, 1051.5], [1596.0, 3451.416666666667], [1598.0, 4052.0], [1614.0, 1982.8181818181818], [1638.0, 3768.833333333333], [1642.0, 5082.888888888888], [1600.0, 3788.349999999999], [1630.0, 1036.3333333333333], [1626.0, 377.0], [1624.0, 2443.5], [1622.0, 176.0], [1634.0, 843.0], [1636.0, 830.0], [1644.0, 640.3333333333334], [1646.0, 1003.5], [1640.0, 1778.9999999999995], [1033.0, 23.0], [1031.0, 1961.0], [1047.0, 2662.0], [1025.0, 1816.0], [1055.0, 2396.75], [1051.0, 685.5], [1053.0, 1495.5], [1027.0, 5400.0], [1029.0, 5412.666666666667], [1037.0, 3135.0], [1035.0, 1953.6], [1039.0, 4411.0], [1085.0, 85.0], [1083.0, 7.0], [1081.0, 18.0], [1079.0, 291.25], [1075.0, 2920.909090909091], [1073.0, 1524.0], [1087.0, 4861.666666666667], [1059.0, 902.0], [1057.0, 2954.0], [1061.0, 3092.0], [1065.0, 1160.6666666666665], [1063.0, 5664.5], [1067.0, 1318.0], [1069.0, 604.0], [1071.0, 717.5], [1043.0, 942.25], [1041.0, 3448.0], [1045.0, 853.0], [1097.0, 5420.5], [1091.0, 3376.714285714286], [1093.0, 2207.0], [1095.0, 5265.0], [1119.0, 2247.714285714286], [1099.0, 1735.5], [1101.0, 5888.666666666667], [1137.0, 3403.75], [1141.0, 670.5], [1143.0, 495.6666666666667], [1145.0, 5090.25], [1147.0, 2747.5], [1149.0, 3090.0], [1151.0, 20.0], [1139.0, 3353.4], [1121.0, 2558.3333333333335], [1125.0, 390.0], [1129.0, 3377.0], [1105.0, 1811.4545454545455], [1107.0, 4693.166666666666], [1113.0, 2643.0], [1111.0, 2833.0], [1115.0, 1358.0], [1157.0, 573.6666666666667], [1161.0, 3085.8571428571427], [1153.0, 1.0], [1181.0, 1361.0], [1183.0, 1389.5], [1177.0, 2499.3333333333335], [1179.0, 1746.75], [1169.0, 654.6666666666666], [1171.0, 5442.6], [1173.0, 5339.0], [1175.0, 2339.9], [1155.0, 911.0], [1159.0, 167.0], [1163.0, 1.0], [1165.0, 80.0], [1201.0, 521.0], [1167.0, 51.0], [1203.0, 5865.5], [1205.0, 3465.2], [1207.0, 6768.0], [1209.0, 2618.0], [1211.0, 2343.0], [1213.0, 3683.8888888888887], [1185.0, 3104.3333333333335], [1193.0, 3326.0], [1195.0, 246.0], [1199.0, 5037.25], [1197.0, 3608.0], [1215.0, 2932.1111111111113], [1223.0, 5566.0], [1227.0, 1851.0], [1217.0, 3111.3333333333335], [1219.0, 1283.0], [1247.0, 144.0], [1241.0, 1922.5], [1237.0, 934.6666666666666], [1235.0, 248.0], [1233.0, 290.5], [1221.0, 3830.0], [1225.0, 2555.0], [1257.0, 2635.0], [1255.0, 0.5], [1253.0, 242.16666666666666], [1251.0, 77.0], [1249.0, 2703.142857142857], [1259.0, 162.66666666666666], [1267.0, 2500.25], [1269.0, 2226.5454545454545], [1271.0, 241.5], [1273.0, 5198.0], [1275.0, 1602.0], [1279.0, 1330.6], [1261.0, 3848.25], [1263.0, 1738.666666666667], [1229.0, 1678.0], [1265.0, 1806.0], [1291.0, 3233.5], [1281.0, 2486.6923076923076], [1311.0, 3213.4705882352946], [1309.0, 4770.285714285714], [1305.0, 558.0], [1307.0, 1474.3999999999999], [1283.0, 3531.0], [1285.0, 2265.5], [1289.0, 2685.1111111111113], [1287.0, 104.0], [1293.0, 1709.0], [1341.0, 3012.8571428571427], [1343.0, 3259.533333333333], [1337.0, 4067.7368421052643], [1339.0, 3265.9166666666665], [1335.0, 610.0], [1333.0, 1025.4545454545453], [1329.0, 380.0], [1295.0, 2451.1666666666665], [1331.0, 1923.2727272727275], [1313.0, 3625.4999999999995], [1315.0, 3012.3437499999995], [1317.0, 1904.7], [1323.0, 1541.0000000000002], [1321.0, 552.3333333333333], [1319.0, 467.0], [1327.0, 2429.75], [1325.0, 4016.4285714285716], [1297.0, 4.0], [1299.0, 856.5714285714287], [1301.0, 154.0], [1303.0, 601.4], [1349.0, 329.4], [1369.0, 1386.0], [1351.0, 167.0], [1373.0, 1437.4074074074074], [1371.0, 19.0], [1367.0, 2001.0], [1365.0, 2671.4666666666662], [1363.0, 5620.0], [1361.0, 2022.681818181818], [1345.0, 3756.5], [1347.0, 2355.0], [1357.0, 319.75], [1359.0, 2962.75], [1393.0, 145.0], [1397.0, 3110.6], [1381.0, 3185.75], [1379.0, 3419.8888888888887], [1385.0, 0.0], [1389.0, 360.0], [1391.0, 265.5], [1405.0, 4230.666666666667], [1403.0, 1412.3913043478262], [1407.0, 4937.0], [1401.0, 1229.2], [1399.0, 2394.181818181818], [1355.0, 221.66666666666669], [1353.0, 383.25], [1415.0, 2346.7173913043475], [1419.0, 2023.962962962963], [1429.0, 230.55555555555554], [1411.0, 2728.375], [1409.0, 6194.5], [1439.0, 1939.6666666666665], [1433.0, 3628.76], [1431.0, 1447.6666666666665], [1437.0, 1748.3333333333333], [1413.0, 2424.7692307692314], [1441.0, 54.0], [1471.0, 3718.5], [1469.0, 2320.6451612903224], [1467.0, 4361.0], [1463.0, 1373.5714285714284], [1461.0, 1947.125], [1423.0, 1043.0], [1421.0, 4318.0], [1457.0, 2394.866666666667], [1459.0, 3297.045454545455], [1443.0, 1607.142857142857], [1445.0, 2379.5], [1447.0, 2326.142857142857], [1449.0, 2934.764705882353], [1451.0, 4430.0], [1453.0, 2307.36], [1455.0, 1847.111111111111], [1427.0, 4054.7333333333336], [1425.0, 2528.0], [1475.0, 2682.2000000000003], [1497.0, 1987.7735849056603], [1495.0, 1774.857142857143], [1493.0, 3001.157894736841], [1491.0, 2872.1578947368425], [1489.0, 4725.5], [1499.0, 2266.3333333333335], [1501.0, 5840.0], [1523.0, 1037.0], [1521.0, 4123.666666666666], [1503.0, 3156.0], [1473.0, 0.0], [1479.0, 3309.454545454545], [1481.0, 0.0], [1483.0, 2826.7], [1487.0, 1953.5], [1525.0, 2959.3333333333335], [1527.0, 2714.0], [1529.0, 2070.4999999999995], [1531.0, 3104.0555555555557], [1533.0, 3328.8666666666663], [1535.0, 807.2], [1517.0, 2548.5], [1515.0, 2045.0465116279072], [1513.0, 1192.2916666666665], [1511.0, 2237.1666666666665], [1509.0, 3002.4], [1507.0, 2389.6666666666665], [1505.0, 2258.125], [1545.0, 2040.6250000000005], [1587.0, 1.0], [1595.0, 4050.0], [1539.0, 828.0], [1537.0, 1923.1333333333332], [1541.0, 0.0], [1547.0, 3276.923076923077], [1549.0, 2103.9285714285716], [1551.0, 1.0], [1589.0, 766.5], [1591.0, 2014.3333333333333], [1593.0, 1519.0], [1565.0, 0.0], [1561.0, 0.5], [1559.0, 3233.0], [1557.0, 404.0], [1555.0, 1906.8571428571424], [1567.0, 5185.0], [1569.0, 2698.25], [1571.0, 88.5], [1575.0, 672.5], [1577.0, 382.0], [1579.0, 334.0], [1583.0, 379.33333333333337], [1581.0, 158.5], [1613.0, 941.8360655737704], [1631.0, 841.0], [1625.0, 789.0], [1623.0, 174.0], [1621.0, 1265.1666666666665], [1633.0, 844.0], [1611.0, 0.0], [1635.0, 450.5], [1637.0, 3418.2], [1643.0, 795.0], [1641.0, 1142.0], [1639.0, 3726.178571428571], [1.0, 13828.333333333332]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1036.9343333333281, 2697.654166666672]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1646.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 55.583333333333336, "minX": 1.65343944E12, "maxY": 900950.4333333333, "series": [{"data": [[1.65343944E12, 900950.4333333333], [1.6534395E12, 5938.366666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65343944E12, 8732.333333333334], [1.6534395E12, 55.583333333333336]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6534395E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2635.907656145069, "minX": 1.65343944E12, "maxY": 11055.886363636364, "series": [{"data": [[1.65343944E12, 2635.907656145069], [1.6534395E12, 11055.886363636364]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6534395E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2287.1895567494958, "minX": 1.65343944E12, "maxY": 2996.6363636363644, "series": [{"data": [[1.65343944E12, 2287.1895567494958], [1.6534395E12, 2996.6363636363644]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6534395E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 218.9090909090909, "minX": 1.65343944E12, "maxY": 582.2807253190057, "series": [{"data": [[1.65343944E12, 582.2807253190057], [1.6534395E12, 218.9090909090909]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6534395E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.65343944E12, "maxY": 37118.0, "series": [{"data": [[1.65343944E12, 23193.0], [1.6534395E12, 37118.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65343944E12, 7227.0], [1.6534395E12, 35110.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65343944E12, 14880.460000000006], [1.6534395E12, 37118.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65343944E12, 9656.149999999992], [1.6534395E12, 36394.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65343944E12, 1.0], [1.6534395E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65343944E12, 3099.5], [1.6534395E12, 19298.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6534395E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 19327.0, "series": [{"data": [[575.0, 4353.5], [618.0, 3968.0], [41.0, 6.0], [40.0, 11011.0], [42.0, 9799.0], [49.0, 8904.0], [3.0, 11996.5], [928.0, 4344.0], [4.0, 19327.0], [87.0, 5901.0], [6.0, 15510.0], [7.0, 18345.0], [131.0, 144.0], [161.0, 4055.0], [173.0, 94.0], [15.0, 14246.0], [248.0, 647.5], [1.0, 14077.0], [275.0, 543.5], [273.0, 507.0], [279.0, 1300.5], [18.0, 11465.0], [314.0, 2762.0], [357.0, 3346.0], [381.0, 3041.5], [415.0, 3289.0], [26.0, 16372.5], [28.0, 15104.0], [466.0, 4560.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[575.0, 48.0], [618.0, 0.0], [40.0, 1.0], [42.0, 1.0], [49.0, 0.0], [3.0, 1.0], [928.0, 1.0], [4.0, 1.0], [87.0, 0.0], [6.0, 0.0], [7.0, 1.0], [131.0, 14.5], [161.0, 27.5], [173.0, 0.0], [15.0, 0.0], [248.0, 40.5], [275.0, 14.0], [273.0, 93.5], [279.0, 45.0], [18.0, 1.0], [314.0, 6.0], [357.0, 1.0], [381.0, 16.0], [415.0, 1.0], [26.0, 1.0], [28.0, 1.0], [466.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 928.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 6060.0, "series": [{"data": [[575.0, 4107.0], [618.0, 3235.0], [41.0, 4.0], [40.0, 3837.0], [42.0, 3850.0], [49.0, 3885.0], [3.0, 3835.5], [928.0, 3992.5], [4.0, 192.5], [87.0, 3203.0], [6.0, 4141.0], [7.0, 223.0], [131.0, 120.0], [161.0, 4008.0], [173.0, 78.0], [15.0, 4447.0], [248.0, 637.0], [1.0, 3915.0], [275.0, 515.0], [273.0, 478.0], [279.0, 1155.0], [18.0, 3588.0], [314.0, 2738.5], [357.0, 3203.0], [381.0, 2990.0], [415.0, 3266.0], [26.0, 6060.0], [28.0, 4447.0], [466.0, 4287.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[575.0, 0.0], [618.0, 0.0], [40.0, 0.0], [42.0, 0.0], [49.0, 0.0], [3.0, 0.0], [928.0, 0.0], [4.0, 0.0], [87.0, 0.0], [6.0, 0.0], [7.0, 0.0], [131.0, 0.0], [161.0, 0.0], [173.0, 0.0], [15.0, 0.0], [248.0, 0.0], [275.0, 0.0], [273.0, 0.0], [279.0, 0.0], [18.0, 0.0], [314.0, 0.0], [357.0, 0.0], [381.0, 0.0], [415.0, 0.0], [26.0, 0.0], [28.0, 0.0], [466.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 928.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.65343944E12, "maxY": 99.56666666666666, "series": [{"data": [[1.65343944E12, 99.56666666666666], [1.6534395E12, 0.43333333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6534395E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65343944E12, "maxY": 75.93333333333334, "series": [{"data": [[1.65343944E12, 75.93333333333334], [1.6534395E12, 0.48333333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65343944E12, 23.25], [1.6534395E12, 0.23333333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.65343944E12, 0.08333333333333333], [1.6534395E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6534395E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.65343944E12, "maxY": 75.93333333333334, "series": [{"data": [[1.65343944E12, 75.93333333333334], [1.6534395E12, 0.48333333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65343944E12, 23.333333333333332], [1.6534395E12, 0.25]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6534395E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.65343944E12, "maxY": 75.93333333333334, "series": [{"data": [[1.65343944E12, 75.93333333333334], [1.6534395E12, 0.48333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65343944E12, 23.333333333333332], [1.6534395E12, 0.25]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6534395E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

